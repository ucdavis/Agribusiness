@model AdminIndexViewModel
@{
    ViewBag.Title = "Admin Home";
    ViewBag.SubPageTitle = "Admin Home";
    ViewBag.Nav = Nav.Home;
}

@section ScriptContent
{
    <style type="text/css">
        .txt { margin-left: 10px;}
    </style>
}

@helper DisplayBlock(int futureBlockCounter, bool? positive, params KeyValuePair<string, int>[] info )
{
    var dispClass = "well";

    var current = info.First();
    
    if (current.Value > 0)
    {
        if (futureBlockCounter == 0)
        {
            dispClass = "alert alert-block alert-success";
        }
        else
        {
            dispClass = "alert alert-block alert-error";
        }    
        
        // with subvalues, bad...
        if (positive.HasValue && !positive.Value)
        {
            for (int i = 1; i < info.Count(); i++)
            {
                if (info[i].Value > 0)
                {
                    dispClass = "alert alert-block";
                }
            }
        }       
    }

    if (info.Count() > 1)
    {
        <div class="@dispClass">
            
            <h2 style="display:inline-block;">@current.Value</h2> 
            <span class="txt">@current.Key</span>
            
            @for(int i = 1; i < info.Count(); i++)
            {
                var clss = "well";
                if (positive.HasValue && !positive.Value && info[i].Value > 0)
                {
                    clss = "alert alert-block alert-error";
                }
                
                <div class="@clss">
                    <h3 style="display:inline-block;">@info[i].Value</h3>
                    <span class="txt">@info[i].Key</span>
                </div>
            }
        </div>        
    }
    else
    {
        <div class="@dispClass">
            <h2 style="display:inline-block;">@current.Value</h2>
            <span class="txt">@current.Key</span>
        </div>
    }
}

@DisplayBlock(Model.PendingApplications + Model.ApprovedApplications, null, 
            new KeyValuePair<string, int>("information requests are currently pending.", Model.PendingInformationRequests))
@DisplayBlock(Model.Registered + Model.PeopleMissingBiography + Model.PeopleMissingHotel + Model.PeopleMissingPhoto, 
            true,
            new KeyValuePair<string, int>("pending applications are awaiting review.", Model.PendingApplications),
            new KeyValuePair<string, int>("approved applications.", Model.ApprovedApplications)
            )

@DisplayBlock(0, false,
            new KeyValuePair<string, int>("registered attendeees that have paid.", Model.Registered),
            new KeyValuePair<string, int>("attendees missing biography.", Model.PeopleMissingBiography),
            new KeyValuePair<string, int>("attendees missing photo.", Model.PeopleMissingPhoto),
            new KeyValuePair<string, int>("attendees not registered for hotel.", Model.PeopleMissingHotel)
            )
@model SendNotificationViewModel

@{
    ViewBag.Title = "Send Notification";
    ViewBag.SubPageTitle = "Send Notification";
}

@section SubPageNavigation{
    <ul class="nav nav-pill">
        <li>
        @if (Model.NotificationTrackingViewModel.People.Count == 1)
        {
            var userId = Model.NotificationTrackingViewModel.People[0].User.Id;
            @Html.ActionLink("Back to Profile", "AdminEdit", "Person", new { id = userId, seminarId = Model.NotificationTrackingViewModel.Seminar.Id }, new { })
        }
        else
        { 
            @Html.ActionLink("Back to Seminar", "Details", "Seminar", new { id = Model.NotificationTrackingViewModel.Seminar.Id }, new { })
        }
        </li>
    </ul>
}

@section ScriptContent
{
    @Html.Partial("_NotificationScripts")
    @Html.Partial("_tinymce", new TinyMceViewModel("EmailQueue_Body", "500", "100%", true))
    
    <link href="@Url.Css("fileuploader.css")" type="text/css" rel="stylesheet"/>
    
    <script type="text/javascript" src='@Url.Script("fileuploader.js")'></script>
    <script type="text/javascript">
        $(function () {
            $("#NotificationTracking_NotificationType").change(function () {
                var typeId = $(this).val();
                var antiForgeryToken = $("input[name='__RequestVerificationToken']").val();
                var url = '@Url.Action("LoadTemplate", "Template")';

                $.post(url, { id: typeId, __RequestVerificationToken: antiForgeryToken }, function (result) {
                    if (result != "") {
                        $("#EmailQueue_Body").tinymce().execCommand('mceReplaceContent', false, result);
                    }
                });
            });

            // initiate the file upload
            var uploader = new qq.FileUploader({

                element: $("#file-uploader")[0],
                action: '@Url.Action("SaveAttachment")',
                onComplete: function (id, fileName, responseJSON) {

                    if (responseJSON != false) {

                        var result = [{ id: responseJSON.id}];
                        $("#attachment-template").tmpl(result).prependTo("#attachments");

                    }

                }

            });
        });       
    </script>
    
    <script type="text/x-jquery-tmpl" id="attachment-template">
    <input type='hidden' id='attachmentIds' name='attachmentIds' value='${id}' />
    </script>
}

@Html.ValidationSummary(false)

@using (Html.BeginForm("Send", "Notification", FormMethod.Post, new { @class = "form-horizontal" }))
{ 
    @Html.AntiForgeryToken()

    @Html.Partial("_NotificationTracking", Model.NotificationTrackingViewModel)
    
    <div class="control-group">
        <fieldset>
            <legend>Notification Message</legend>
            
            <div class="control-group">
                <label for="EmailQueue.FromAddress" class="control-label">From Address</label>
                <div class="controls">
                    <select id="EmailQueue.FromAddress" name="EmailQueue.FromAddress">
                        <option value="agribusiness@ucdavis.edu">agribusiness@ucdavis.edu</option>
                        <option value="christine.schmidt@ucdavis.edu">christine.schmidt@ucdavis.edu</option>
                        <option value="dan.sumner@ucdavis.edu">dan.sumner@ucdavis.edu</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.EmailQueue.FromAddress)
                </div>
            </div>
            <div class="control-group">
                <label for="EmailQueue.Subject" class="control-label">Subject</label>
                <div class="controls">
                    @Html.EditorFor(model => model.EmailQueue.Subject)
                    @Html.ValidationMessageFor(model => model.EmailQueue.Subject)
                </div>
            </div>
            <div class="control-group">
                <label for="Attachments" class="control-label">Attachment(s)</label>
                <div class="controls">
                    <div id="file-uploader"></div>
                </div>
            </div>
            <div class="control-group">
                <label for="EmailQueue.Body" class="control-label">
                    Body
                    @Html.ValidationMessageFor(model => model.EmailQueue.Body)
                </label>
                <div class="controls row-fluid">
                    <span class="span6">
                        @Html.TextAreaFor(model => model.EmailQueue.Body, new { @class = "tinymce-text" })
                    </span>
                    <span class="span2">
                        @Html.Partial("_TemplateTokens")                        
                    </span>
                    
                </div>
            </div>
        </fieldset>
    </div>

    <div class="form-actions">
        <input type="submit" class="btn btn-primary" value="Save" />
        @if (Model.NotificationTrackingViewModel.People.Count == 1)
        {
            var userId = Model.NotificationTrackingViewModel.People[0].User.Id;
            @Html.ActionLink("Cancel", "AdminEdit", "Person", new { id = userId, seminarId = Model.NotificationTrackingViewModel.Seminar.Id }, new { @class = "btn" })
        }
        else
        { 
            @Html.ActionLink("Cancel", "Details", "Seminar", new { id = Model.NotificationTrackingViewModel.Seminar.Id }, new { @class = "btn" })
        }
    </div>
}


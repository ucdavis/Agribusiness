@model PersonViewModel

@Html.AntiForgeryToken()
@Html.Hidden("seminarPersonId", Model.SeminarPerson != null ? Model.SeminarPerson.Id : -1)

@{
    var siteId = ViewData["site"] as string;
    var site = Agribusiness.Web.Services.SiteService.LoadSite(siteId);
}

<div class="control-group">
    <fieldset>
        <legend>Personal Information</legend>
        <div class="control-group">
            <label class="control-label" for="Person.FirstName">First Name<span class="required">*</span></label>
            <div class="controls">
                @Html.EditorFor(a=>a.Person.FirstName)
                @Html.ValidationMessageFor(a=>a.Person.FirstName)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Person.MI">MI</label>
            <div class="controls">
                @Html.EditorFor(a=>a.Person.MI)
                @Html.ValidationMessageFor(a=>a.Person.MI)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Person.LastName">Last Name<span class="required">*</span></label>
            <div class="controls">
                @Html.EditorFor(a=>a.Person.LastName)
                @Html.ValidationMessageFor(a=>a.Person.LastName)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Person.Salutation">Salutation</label>
            <div class="controls">
                @Html.EditorFor(a=>a.Person.Salutation)
                @Html.ValidationMessageFor(a=>a.Person.Salutation)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Person.BadgeName">Badge Name</label>
            <div class="controls">
                @Html.EditorFor(a=>a.Person.BadgeName)
                @Html.ValidationMessageFor(a=>a.Person.BadgeName)
            </div>
        </div>
    </fieldset>
</div>

<div class="control-group">
    <fieldset>
        <legend>Contact Information</legend>
        <div class="control-group">
            <label for="Username" class="control-label">Username<span class="required">*</span></label>
            <div class="controls">
                @Html.EditorFor(a => a.UserName)
                @Html.ValidationMessageFor(a => a.UserName)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Email">Email<span class="required">*</span></label>
            <div class="controls">
                @Html.EditorFor(a=>a.Email)
                @Html.ValidationMessageFor(a=>a.Email)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Person.Phone">Phone<span class="required">*</span></label>
            <div class="controls">
                @Html.EditorFor(a=>a.Person.Phone)
                @Html.ValidationMessageFor(a=>a.Person.Phone)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Person.PhoneExt">Ext.</label>
            <div class="controls">
                @Html.TextBoxFor(a=>a.Person.PhoneExt)
                @Html.ValidationMessageFor(a => a.Person.PhoneExt)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Person.CellPhone">
                Cell Phone
            </label>
            <div class="controls">
                @Html.EditorFor(a=>a.Person.CellPhone)
                @Html.ValidationMessageFor(a=>a.Person.CellPhone)
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="Person.Fax">Fax</label>
            <div class="controls">
                @Html.EditorFor(a=>a.Person.Fax)
                @Html.ValidationMessageFor(a=>a.Person.Fax)
            </div>
        </div>

        @for (int i = 0; i < Model.Contacts.Count(); i++ )
        { 
            var required = Model.Contacts[i].ContactType.Required;
			
            <h3>@Model.Contacts[i].ContactType.Name</h3>
						
            @Html.Hidden(string.Format("Contacts[{0}].ContactType", i), Model.Contacts[i].ContactType.Id)
            <div class="control-group @(required ? "required" : string.Empty)">
                <label class="control-label" for="Contacts[i].FirstName">
                    First Name
                    @if (required){<span class="required">*</span>}
                </label>
                <div class="controls">
                    @Html.TextBox(string.Format("Contacts[{0}].FirstName", i), Model.Contacts[i].FirstName)
                </div>
            </div>
            <div class="control-group @(required ? "required" : string.Empty)">
                <label class="control-label" for="Contacts[i].LastName">
                    Last Name
                    @if (required){<span class="required">*</span>}
                </label>
                <div class="controls">
                    @Html.TextBox(string.Format("Contacts[{0}].LastName", i), Model.Contacts[i].LastName)
                </div>
            </div>
            <div class="control-group @(required ? "required" : string.Empty)">
                <label class="control-label" for="Contacts[i].Phone">
                    Phone
                    @if (required){<span class="required">*</span>}
                </label>
                <div class="controls">@Html.TextBox(string.Format("Contacts[{0}].Phone", i), Model.Contacts[i].Phone)</div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Contacts[i].Ext">Ext.</label>
                <div class="controls">
                    @Html.TextBox(string.Format("Contacts[{0}].Ext", i), Model.Contacts[i].Ext)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Contacts[i].Email">Email</label>
                <div class="controls">
                    @Html.TextBox(string.Format("Contacts[{0}].Email", i), Model.Contacts[i].Email)
                </div>
            </div>
        }
    </fieldset>
</div>

<div class="control-group">
    <fieldset>
        <legend>Addresses</legend>
        @for (int i = 0; i < Model.Addresses.Count(); i++)
        {
            var required = Model.Addresses[i].AddressType.Required;
	  
            <h4>@string.Format("{0} Address", Model.Addresses[i].AddressType.Name)</h4>
  
            if(!string.IsNullOrWhiteSpace(Model.Addresses[i].AddressType.Description))
            {
                <p>@Model.Addresses[i].AddressType.Description</p>
            }
	  
            <input type="hidden" id='@string.Format("Addresses_{0}__AddressType", i)' name='@string.Format("Addresses[{0}].AddressType", i)' value='@Model.Addresses[i].AddressType.Id' />
			
            <div class="control-group">
                <label class="control-label" for="Addresses[i].Line1">
                    Line 1
                    @if (required){<span class="required">*</span>}
                </label>
                <div class="controls">
                    @Html.TextBox(string.Format("Addresses[{0}].Line1", i), Model.Addresses[i].Line1)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Addresses[i].Line2">
                    Line 2
                </label>
                <div class="controls">
                    @Html.TextBox(string.Format("Addresses[{0}].Line2", i), Model.Addresses[i].Line2)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Addresses[i].City">
                    City
                    @if (required){<span class="required">*</span>}
                </label>
                <div class="controls">
                    @Html.TextBox(string.Format("Addresses[{0}].City", i), Model.Addresses[i].City)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Addresses[i].State">
                    State
                    @if (required){<span class="required">*</span>}
                </label>
                <div class="controls">
                    @Html.TextBox(string.Format("Addresses[{0}].State", i), Model.Addresses[i].State)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Addresses[i].Zip">
                    Zip
                    @if (required){<span class="required">*</span>}
                </label>
                <div class="controls">
                    @Html.TextBox(string.Format("Addresses[{0}].Zip", i), Model.Addresses[i].Zip)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Addresses[i].Country">
                    Country
                    @if (required){<span class="required">*</span>}
                </label>
                <div class="controls">
                    @{  var ss = Model.Addresses.ElementAtOrDefault(i);
                        var country = ss.Country;}
                    @this.Select(string.Format("Addresses[{0}].Country", i)).Options(Model.Countries, x => x.Id, x => x.Name).FirstOption("--Select a Country--").Selected(country != null ? country.Id : "USA")
                </div>
            </div>
        }
    </fieldset>
</div>
	
@if (Model.Seminar != null)
{
    <div class="control-group">
        <fieldset>
            <legend>Firm Information</legend>    
            
            <p class="well">Please select your firm from the pop-up list and make any necessary changes below.  If your firm does not appear, select "Other" and fill in the requested information.</p>

        </fieldset>
    </div>
}

@*@if (Model.Seminar != null)
{
    <div class="control-group">
        <legend>Firm Information</legend>
	    <fieldset>

		<div class="text_btn" id="selectFirm_btn">
			<a href="javascript:;">Select a Firm</a>
			<span style="color:Red;">*</span>
		</div>
		

		<div id="firm_dialog" title="Select a Firm">
			<p>
			@this.Select("Firm").Options(Model.Firms, x => x.Id, x => x.Name).FirstOption("--Select a Firm--")
			</p>
		</div>


		@{
			// check and see if it's an existing firm, true if existing firm
			var existing = Model.Firm.Id > 0;
			// check if it's a new firm, true if not existing
			var newFirm = Model.Firm.Id <= 0 && !string.IsNullOrWhiteSpace(Model.Firm.Name) && !string.IsNullOrWhiteSpace(Model.Firm.Description);

			var displayExisting = !existing ? "display:none;" : "";
			var displayNew = !newFirm ? "display:none;" : "";

			var combined = existing && newFirm ? "display:none;" : "";

			var existingFirmName = Model.Firm != null ? Model.Firm.Name : string.Empty;
		}

		<div class="display-form" id="existingFirmInformation" style='@displayExisting' >
		@Html.Hidden("Firm", Model.Firm.Id)
		<div class="display-label">Firm Name:</div>
		<div class="display-details"><span id="firmName">@existingFirmName</span>
		@Html.ActionLink("Edit Firm", "Edit", "Firm", new { id = @Model.Firm.Id, userId = @Model.Person.User.Id, seminarId = Model.Seminar.Id }, new {style = "margin-left: 20px;"})
		</div>
		</div>

			<div class="control-group">Firm Name:<span>*</span></div>
				<div class="controls">
					@Html.TextBox("FirmName", newFirm ? Model.Firm.Name : string.Empty)
				</div>
			</div>
			<div class="control-group">Business Type/Firm Description:<span>*</span>
				<div class="controls">
					@Html.TextArea("FirmDescription", newFirm ? Model.Firm.Description : string.Empty)
				</div>
			</div>
			<div class="control-group"><label class="control-label" for="Firm.WebAddress)
				<div class="controls">
					@Html.TextBox("FirmWebAddress", newFirm ? Model.Firm.WebAddress : string.Empty)
				</div>
			</div>

			<div class="control-group">Job Title:<span>*</span>
				<div class="controls">@Html.TextBox("Title", Model.SeminarPerson != null ? Model.SeminarPerson.Title : string.Empty)</div>
			</div>

	<fieldset>
		<legend>Commodities</legend>

		<ul class="commodities">
		
			@foreach (var c in Model.Commodities)
			{
				var selected = Model.SeminarPerson != null && Model.SeminarPerson.Commodities.Contains(c) ? "checked" : string.Empty;
				
				<li>
					<input type="checkbox" name="Commodities" value='@c.Id' @selected />
					@c.Name
				</div>
			}

		</ul>

	</fieldset>       
}*@

<div class="control-group">
    <fieldset>
	    <legend>Communication Options</legend>

	    <p class="well">Please choose your preference for receiving communications from us.  If selecting "Assistant", all communications will only be sent to the assistant listed below.  If selecting "Carbon Copy Assistant", all communications will be sent to both you and the assistant listed below.  If selecting "Directly", all communications will only be sent to you.</p>

        <div class="control-group">
            <label class="control-label"><span class="required"></span></label>
            <div class="controls">
                @this.Select("Person.CommunicationOption").Options(Model.CommunicationOptions, x=>x.Id,x=>x.Name).FirstOption("--Select Communication Option--").Selected(Model.Person.CommunicationOption!= null ? Model.Person.CommunicationOption.Id : string.Empty)
            </div>
        </div>
    </fieldset>
</div>

<div class="control-group">
    <fieldset>
	    <legend>Profile Picture</legend>
	    <div class="control-group">
		    <div class="controls"><input type="file" name="profilepic" id="profilepice" /></div>
	    </div>
    </fieldset>
</div>	

<div class="control-group">
    <fieldset>
	    <legend>Contact Information Release</legend>
	    <p class="well">
	    I authorize the @site.Name to share my contact information through this website with other attendees.  Information that will be
	    shared include Email, Phone, Address and Web Site.  
	    </p>

        <div class="control-group">
            <div class="controls">
                @Html.EditorFor(a=>a.Person.ContactInformationRelease) 
                <text>I Agree</text>
            </div>
        </div>
    </fieldset>
</div>

<div class="form-actions">
    <input type="submit" value="Save" class="btn btn-primary" /> |
	@if (Model.SeminarPerson == null && Model.Seminar != null)
	{
	@Html.ActionLink("Cancel", "Index", "Attendee", new { id = Model.Seminar.Id }, new { @class="btn" })
	}
	else
	{ 
	@Html.ActionLink("Cancel", "Index", new {}, new {@class="btn"})
	}
</div>

<style type="text/css">
	.commodities li
	{
		float:left;
		display:inline-block;
		width: 210px;
	}
</style>

<script type="text/javascript">
	$(function () {
		$("#firm_dialog").dialog({
			autoOpen: false,
			modal: true,
			width: 800,
			buttons: {
				"Confirm": selectFirm,
				Cancel: function () { $(this).dialog("close"); }
			}
		});

		$("#selectFirm_btn").click(function () {
			$("#firm_dialog").dialog("open");
		});
	});

	function selectFirm() {

		var dropDown = $(this).find("select");

		// hide the existing firms
		$("#existingFirmInformation").hide();
		$("#firmInformation").hide();
		$("#firmAddress").hide();
		$("#jobInformation").hide();

		// blank out the other txt boxes
		$("#Firm").val("");
		$("#Firm_Name").val("");
		$("#Firm_Description").val("");

		// make sure a firm has been selected
		if (dropDown.val() != "" && dropDown.val() != "0") {

			// display the correct form
			$("#firmName").html($(dropDown).find(":selected").text());
			$("#Firm").val($(dropDown).val());
			$("#existingFirmInformation").show();

		}
		// selected other
		else if (dropDown.val() == "0") {

			$("#firmInformation").show();

		}
		// did not select a firm or other
		else {
			alert("no firm selected");
			return;
		}

		$("#jobInformation").show();
		$(this).dialog("close");
	}
</script>